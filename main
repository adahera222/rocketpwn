#!/usr/bin/python
import random
import argparse

import pygame

from core import colors
from core import elements

dbg = True
dbg = False
dbg_detect = False

def collision():
    print 'X'

def main(mapfile=None):
    pygame.init()
    pygame.display.set_caption('RocketPwn')
    mode = (800, 600)
    #mode = (1366, 768)
    FPS = 60

    screen = pygame.display.set_mode(map(int, mode))

    bg = pygame.Surface(mode)
    bg.fill(colors.t)

    ships = pygame.sprite.RenderUpdates()
    ui = pygame.sprite.RenderUpdates()
    if not mapfile:
        mapfile = 'lvl/1'
    with open(mapfile) as f:
        lines = f.readlines()

    _lvl = map(lambda x: x.strip('\n').ljust(9, ' '), lines[1:])
    lvl = ['' for line in _lvl]

    for line in _lvl:
        for i, c in enumerate(line):
            lvl[i] += c
        if dbg:
            print(line)

    s = mode[1] - 120
    map_sq = pygame.rect.Rect(mode[0] - (s + 100), 60, s, s)
    pygame.draw.rect(bg, colors.g, map_sq, 3)
    tile_size = int(1. * s / 9)
    ship_size = int(tile_size * 2 / 3)
    if dbg:
        print("Tile size: {}".format(tile_size))
        print("Ship size: {}".format(ship_size))

    for i in range(0, 9):
        for j in range(0, 9):
            tile_rect = pygame.rect.Rect(map_sq[0] + tile_size * i, map_sq[1] + tile_size * j, tile_size, tile_size)
            rect = tile_rect.inflate(-6, -6)
            if lvl[i][j] == '-':
                pygame.draw.rect(bg, colors.g, rect, 2)
            elif lvl[i][j] == 'T':
                pygame.draw.rect(bg, colors.r, rect, 2)
            elif lvl[i][j] == '>':
                pygame.draw.rect(bg, colors.dr, rect, 2)
                ship_init = rect.center

    thrust_progress = elements.Progress((0, 0), (mode[0], 30), colors.g)
    power_progress = elements.Progress((0, mode[1] - 30), (mode[0], 30), colors.dr)
    ship = elements.Ship(ship_init, (1, 0), size=ship_size)
    dship = elements.Ship((200, 200), (0, 1), color=colors.r, size=ship_size * 2)
    ui.add(thrust_progress)
    ui.add(power_progress)
    ships.add(ship)
    ships.add(dship)
    running, moving = True, False
    ship.force = 0
    f_low, f_high = 0.02, 0.03
    # hard?
    # f_low, f_high = 0.01, 0.10
    nextforce = random.uniform(f_low, f_high)
    thrust_interval, thrust_duration = 4000, 2000
    thrust_counter = 2500
    ticks = 0

    screen.blit(bg, (0, 0))
    clock = pygame.time.Clock()
    pygame.display.flip()

    while running:
        if dbg_detect:
            print map(lambda (x, y): (round(x, 4), round(y)), [ship.ta, ship.tb, ship.tc])
            print ship.image.get_rect()
            pygame.draw.polygon(
                screen,
                colors.r,
                ship.triangle_points(),
                1)

            pygame.display.flip()

        time_passed = clock.tick(FPS)
        ticks += time_passed
        thrust_counter += time_passed
        if thrust_counter >= thrust_interval:
            ship.force = nextforce
            nextforce = random.uniform(f_low, f_high)
            nextforce = 0.04
            thrust_counter = random.randrange(0, 1000)

        if ship.force > 0:
            ship.force -= 0.0002

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
                break
            if event.type == pygame.KEYDOWN:
                if event.key in (pygame.K_ESCAPE, pygame.K_q):
                    running = False
                    break
                if event.key == pygame.K_SPACE:
                    moving = True
            if event.type == pygame.KEYUP:
                moving = False

        if moving:
            ship.rotate(5)

        dship.heading = ship.dir

        if dbg:
            print "s=%f f=%f" % (ship.speed, ship.force)
            print "Ship dir:%f head:%f" % (ship.dir.angle, ship.heading.angle)
            print "Ship dir:%s head:%s" % (ship.dir, ship.heading)

        thrust_progress.update(1. * thrust_counter / thrust_interval)
        if ship.force <= 0:
            power_progress.update(1 - 10. * nextforce)
        else:
            power_progress.update(1 - 10. * ship.force)

        if dbg:
            print 'ticks', ticks
            print 'tp', thrust_counter / thrust_interval
            print 'dt', time_passed
        ships.update(time_passed, None)

        for point in ship.triangle_points():
            if not map_sq.collidepoint(point):
                collision()

        ui.clear(screen, bg)
        ships.clear(screen, bg)
        dirty = ui.draw(screen)
        dirty += ships.draw(screen)
        pygame.display.update(dirty)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-m', '--map', help='map FILE', metavar='FILE')

    args = parser.parse_args()

    main(mapfile=args.map)
